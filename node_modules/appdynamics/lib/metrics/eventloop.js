'use strict';

function EventLoopMetrics(agent) {
  this.agent = agent;
}

exports.EventLoopMetrics = EventLoopMetrics;

EventLoopMetrics.prototype.init = function() {
  var proxy = this.agent.proxy;
  var thread = this.agent.thread;
  var metricsManager = this.agent.metricsManager;
  var eventLoopStats;
  
  if (process.env.NODE_ENV == 'test') {
    eventLoopStats = []; // fixup for unit tests
  } else {
    eventLoopStats = this.agent.appdNative.getEventLoopInfo();
  }

  var eventLoopCountMetric = metricsManager.addMetric(
    'Event Loop', 'Event Loop Ticks', 
    function() { return eventLoopStats[0]; },
    'count', 'set');
  var eventLoopMinMetric   = metricsManager.addMetric(
    'Event Loop', 'Minimum Event Loop Tick Length', 
    function() { return eventLoopStats[1]; },
    'ms', 'set');
  var eventLoopMaxMetric   = metricsManager.addMetric(
    'Event Loop', 'Maximum Event Loop Tick Length', 
    function() { return eventLoopStats[2]; },
    'ms', 'set');
  var eventLoopAvgMetric   = metricsManager.addMetric(
    'Event Loop', 'Average Event Loop Tick Length', 
    function() { return eventLoopStats[3] / eventLoopStats[0]; },
    'ms', 'set');
  var eventLoopIOMetric   = metricsManager.addMetric(
    'Event Loop', 'Average Event Loop IO Time', 
    function() { return eventLoopStats[4] / eventLoopStats[0]; },
    'ms', 'set');
};

EventLoopMetrics.prototype.reset = function() {
  this.agent.appdNative.resetEventLoopInfo();
};
