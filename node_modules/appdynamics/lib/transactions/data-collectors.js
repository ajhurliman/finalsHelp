var parseCookies = require('./cookie-util').parseCookies,
    parseUrl = require('url').parse;

function DataCollectors(agent) {
    this.agent = agent;
    this.gatherersByID = [];
    this.btIDtoGathererIDs = [];
}

module.exports.DataCollectors = DataCollectors;

DataCollectors.prototype.init = function() {
    var self = this;

    self.agent.on('configUpdated', function() {
        var dataGatherers = self.agent.configManager.getConfigValue('dataGatherers');
        self.gatherersByID = !dataGatherers ? [] : dataGatherers.reduce(function(mapping, config) {
            mapping[config.gathererID] = config;
            return mapping;
        }, {});
        
        var btConfig = self.agent.configManager.getConfigValue('dataGathererBTConfig.btConfig');
        self.btIDtoGathererIDs = !btConfig ? [] : btConfig.reduce(function(mapping, config) {
            mapping[config.btID] = config.gathererIDs;
            return mapping;
        }, {});
    });
};

DataCollectors.prototype.collectHttpData = function(transaction, req) {
    var btID = transaction.registrationId,
        collectors = this.getDataCollectorsFor(btID),
        data = { url: req.url };

    if (collectors) {
        collectors.forEach(function(collector) {
            var config;

            if (collector.type === 'HTTP') {
                config = collector.httpDataGathererConfig;

                if (config.cookieNames) {
                    var cookies = parseCookies(req);
                    data.cookies = data.cookies || [];
                    config.cookieNames.forEach(function(name) {
                        var value = cookies[name];
                        if (value) data.cookies.push({ name: name, value: value});
                    }, this);
                }
                
                if (config.headers) {
                    data.headers = data.headers || [];
                    config.headers.forEach(function(name) {
                        var value = req.headers[name];
                        if (value) data.headers.push({ name: name, value: value });
                    }, this);
                }
                
                if (config.requestParams) {
                    var url = parseUrl(req.url, true),
                        params = url.query;
                    data.httpParams = data.httpParams || [];
                    config.requestParams.forEach(function(param) {
                        var value = params[param.name];
                        if (value) data.httpParams.push({ name: param.name, value: value });
                    }, this);
                }
            }
        }, this);
    }

    return data;
};

DataCollectors.prototype.getDataCollectorsFor = function(btID) {
    var dataGatherers = this.dataGatherers,
        gathererIDs = this.btIDtoGathererIDs[btID];

    return gathererIDs && gathererIDs.map(function(id) {
        return this.gatherersByID[id];
    }, this);
};
