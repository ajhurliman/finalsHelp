'use strict';


function EumCookie(agent, transaction, request, response, isHttps) {
  this.agent = agent;
  this.eum = agent.eum;

	this.transaction = transaction;
	this.request = request;
	this.response = response;
	this.isHttps = isHttps;

  this.isAjax = undefined;
  this.ajaxHeaderCounter = 0;

  this.cookieValue = undefined;
}
exports.EumCookie = EumCookie;


EumCookie.prototype.now = function() {
  return Date.now();
}

EumCookie.prototype.addSubCookie = function(name, value) {
	var self = this;

	self.agent.logger.log("eum-cookie: addSubCookie: Setting value " + name + ": " + value);


	if(self.isAjax) {
		self.response.setHeader(self.eum.ADRUM_PREFIX + (self.ajaxHeaderCounter++), name + ':' + encodeURIComponent(value));
	}
	else {
		if(!self.cookieValue) {
			var referer = self.request.headers['referer'];
			self.cookieValue = 'R:' + (referer ? referer.length : '0');
		}

		self.cookieValue += '|' + name + ':' + encodeURIComponent(value);
	}
};



EumCookie.prototype.setCookie = function() {
	var self = this;

	// headers already set
	if(self.isAjax) {
		return
	}

	self.setCookieHeader(self.eum.ADRUM_MASTER_COOKIE_NAME, self.cookieValue);
};



EumCookie.prototype.setCookieHeader = function(name, val, opt) {
	var self = this;

  var pairs = [name + '=' + val];

  pairs.push('Path=/');
  pairs.push('Expires=' + (new Date(self.now() + 30000)).toUTCString());
  if(self.isHttps) pairs.push('Secure');

  var rumCookie = pairs.join('; ');

	self.agent.logger.log("eum-cookie: setCookieHeader: Setting cookie: " + rumCookie);

	var cookies = self.response.getHeader('Set-Cookie');
  if(cookies) {
    if(Array.isArray(cookies)) {
      rumCookie = cookies.concat(rumCookie);
    }
    else {
      rumCookie = [cookies, rumCookie];
    }
  }

  self.response.setHeader('Set-Cookie', rumCookie);
};



EumCookie.prototype.build = function() {
	var self = this;

	// skip if transaction is ignored
	if(self.transaction.ignore) {
		return false;
	}


	// generate GUID
	var guid = self.eum.generateGuid();


	// if a snapshot is to be sent, it will include this guid
	self.transaction.eumGuid = guid;


	// is ajax request
	var adrumHeader = self.request.headers['adrum'];
	self.isAjax = !!(adrumHeader && adrumHeader.indexOf('isAjax:true') != -1);


	// set values
	self.addSubCookie(self.eum.CLIENT_REQUEST_GUID_KEY, guid);

  if (self.transaction.registrationId) {
	  self.addSubCookie(self.eum.BT_ID_KEY, self.transaction.registrationId);
  }


	var btInfoResponse = self.transaction.btInfoResponse;
	if(btInfoResponse && btInfoResponse.averageResponseTimeForLastMinute) {
		self.addSubCookie(self.eum.BT_ART_KEY, btInfoResponse.averageResponseTimeForLastMinute.toString());
	}

  if (self.transaction.hasSnapshotWithCallGraphData()) {
    self.addSubCookie(self.eum.BACKEND_SNAPSHOT_TYPE_KEY, 'f');
  }


	// add cookie to response
	self.setCookie();


	return true;
};
